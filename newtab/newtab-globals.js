!function(){"use strict";class t{static async writeData(t,e){try{await chrome.storage.local.set({[t]:e})}catch(e){throw console.error(`Error writing storage key ${t}:`,e),e}}static async readData(t){try{const e=await chrome.storage.local.get([t]);return e&&"object"==typeof e&&void 0!==e[t]?e[t]:null}catch(e){return console.error(`Error reading storage key ${t}:`,e),null}}static async removeData(t,e=!0){await chrome.storage.local.remove(t)}static async clear(t=!0){await chrome.storage.local.clear()}static async writeValue(t,e){return this.writeData(t,e)}static async readValue(t,e=null){const a=await this.readData(t);return null!==a?a:e}}const e=new class{constructor(){this.CACHE_EXPIRY=864e5}async getCacheTimestamp(e){const a=await t.readData(`${e}:cache:timestamp`);return a?parseInt(a,10):null}async setCacheTimestamp(e){const a=Date.now();return await t.writeData(`${e}:cache:timestamp`,a.toString()),a}async isCacheValid(t){const e=await this.getCacheTimestamp(t);return!!e&&Date.now()-e<this.CACHE_EXPIRY}async getCachedData(e,a){if(!await this.isCacheValid(e))return null;const s=await t.readData(`${e}:cache:${a}`);if(!s)return null;try{return JSON.parse(s)}catch(t){return console.warn(`Failed to parse cached ${a} for ${e}:`,t),null}}async setCachedData(e,a,s){await t.writeData(`${e}:cache:${a}`,JSON.stringify(s)),await this.setCacheTimestamp(e)}async clearCache(e){const a=[`${e}:cache:timestamp`],s=["assets","ids","data"];for(const t of s)a.push(`${e}:cache:${t}`);for(const e of a)await t.removeData(e)}async getImageCache(t){return await caches.open(`${t}-images`)}async getCachedImage(t,e,a={}){const s=await this.getImageCache(t);return await s.match(e,a)}async setCachedImage(t,e,a,s={}){const r=await this.getImageCache(t);return await r.put(e,a.clone()),a}async clearImageCache(t){return await caches.delete(`${t}-images`)}blobToDataUrl(t){return new Promise((e,a)=>{const s=new FileReader;s.onload=()=>e(s.result),s.onerror=a,s.readAsDataURL(t)})}async loadAndCacheImage(t,e,a={}){const s={method:"GET",headers:{Accept:"image/*"}},r={ignoreMethod:!0,ignoreSearch:!0,ignoreVary:!0};try{let i=await this.getCachedImage(t,e,r);if(!i){const n=await fetch(e,{...s,...a});if(!n.ok)throw new Error(`Failed to fetch image: ${n.status}`);i=await this.setCachedImage(t,e,n,r)}const n=await i.blob();return await this.blobToDataUrl(n)}catch(t){throw console.error(`Failed to load image from ${e}:`,t),t}}};class a{constructor(t,a){this.name=t,this.displayName=a,this.DATA_REQUEST_OPTIONS={method:"GET",headers:{Accept:"application/json"}},this.cache=e}async getCachedData(t){return await this.cache.getCachedData(this.name,t)}async setCachedData(t,e){return await this.cache.setCachedData(this.name,t,e)}async loadImage(t){try{const e=await this.getAsset(t);if(!e)return!1;const a=e.getProcessedImageUrl();return await this.cache.loadAndCacheImage(this.name,a),!0}catch(e){return console.error(`Failed to load ${this.name} image ${t}:`,e),!1}}}class s{constructor(t){this.id=t.id||this.generateId(),this.title=t.title||"Untitled",this.creator=t.creator||"Unknown Artist",this.attribution=t.attribution||"",this.remoteImageUrl=t.image||"",this.detailsUrl=t.link||"",this.provider="google-arts"}static fromApiResponse(t){return new s(t)}generateId(){return Math.random().toString(36).substr(2,9)}async isImageCached(){const t=await caches.open(`${this.provider}-images`);return!!await t.match(this.getProcessedImageUrl())}async getDisplayImageUrl(){const t=await caches.open(`${this.provider}-images`),e=await t.match(this.getProcessedImageUrl());if(e){const t=await e.blob();return URL.createObjectURL(t)}return this.getProcessedImageUrl()}getProcessedImageUrl(){return this.remoteImageUrl+"=s1920-rw"}getDetailsUrl(){return`https://artsandculture.google.com/asset/${this.detailsUrl}`}toJSON(){return{id:this.id,title:this.title,creator:this.creator,attribution:this.attribution,remoteImageUrl:this.remoteImageUrl,detailsUrl:this.detailsUrl,provider:this.provider}}static fromJSON(t){return new s(t)}isValid(){return!(!this.remoteImageUrl||!this.title)}}class r extends a{constructor(){super("google-arts","Google Arts & Culture"),this._syncedAssetData=[],this.JSON_DATA_URL="https://www.gstatic.com/culturalinstitute/tabext/imax_2_2.json"}async syncData(){try{const t=await this.getCachedData("assets");if(t)return this._syncedAssetData=t.map(t=>s.fromJSON(t)),!0;const e=await fetch(this.JSON_DATA_URL,{...this.DATA_REQUEST_OPTIONS,mode:"cors"});if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);const a=await e.json();return this._syncedAssetData=a.map(t=>s.fromApiResponse(t)).filter(t=>t.isValid()),await this.setCachedData("assets",this._syncedAssetData.map(t=>t.toJSON())),!0}catch(t){return console.error("Failed to sync Google Arts data:",t),!1}}async syncedAssetCount(){return 0===this._syncedAssetData.length&&await this.syncData(),this._syncedAssetData.length}async getAsset(t){return 0===this._syncedAssetData.length&&await this.syncData(),t<0||t>=this._syncedAssetData.length?(console.error(`Asset index ${t} is out of range`),null):this._syncedAssetData[t]}async getDisplayImageUrl(t){const e=await this.getAsset(t);return e?await e.getDisplayImageUrl():null}getDetailsUrl(t){return t.getDetailsUrl()}}class i{constructor(t){this.id=t.objectID?.toString()||this.generateId(),this.title=t.title||"Untitled",this.creator=this.extractArtist(t),this.attribution=this.extractAttribution(t),this.remoteImageUrl=t.primaryImage||"",this.detailsUrl=t.objectURL||"",this.provider="met-museum"}static fromApiResponse(t){return new i(t)}generateId(){return Math.random().toString(36).substr(2,9)}extractArtist(t){return t.artistDisplayName||t.constituents&&t.constituents[0]?.name||"Unknown Artist"}extractAttribution(t){const e=[t.culture,t.period,t.dynasty,t.reign].filter(Boolean);return e.length>0?e.join(", "):t.creditLine||""}async isImageCached(){const t=await caches.open(`${this.provider}-images`);return!!await t.match(this.getProcessedImageUrl())}async getDisplayImageUrl(){const t=this.getProcessedImageUrl();if(!t)return null;const e=await caches.open(`${this.provider}-images`),a=await e.match(t);if(a){const t=await a.blob();return URL.createObjectURL(t)}return t}getProcessedImageUrl(){return this.remoteImageUrl}getDetailsUrl(){return this.detailsUrl}toJSON(){return{id:this.id,title:this.title,creator:this.creator,attribution:this.attribution,remoteImageUrl:this.remoteImageUrl,detailsUrl:this.detailsUrl,provider:this.provider}}static fromJSON(t){const e=new i({objectID:parseInt(t.id,10),title:t.title,artistDisplayName:t.creator,primaryImage:t.remoteImageUrl,objectURL:t.detailsUrl});return e.attribution=t.attribution,e}isValid(){return!(!this.remoteImageUrl||!this.title)}isPublicDomain(t){return!0===t.isPublicDomain}hasImage(t){return!(!t.primaryImage||""===t.primaryImage.trim())}static isValidForDisplay(t){return!(!t.primaryImage||""===t.primaryImage.trim()||!0!==t.isPublicDomain)}}class n extends a{constructor(){super("met-museum","Metropolitan Museum of Art"),this._syncedAssetData=[],this.allAvailableIds=[],this.BASE_URL="https://collectionapi.metmuseum.org/public/collection/v1",this.isSyncing=!1}async syncData(){if(this.isSyncing)return!0;if(this.allAvailableIds&&this.allAvailableIds.length>0)return!0;try{this.isSyncing=!0;const t=await this.getCachedData("ids");if(t)return this.allAvailableIds=t,!0;const e=await fetch(`${this.BASE_URL}/search?hasImages=true&isHighlight=true&q=painting`,this.DATA_REQUEST_OPTIONS);if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);const a=await e.json();return this.allAvailableIds=a.objectIDs||[],await this.setCachedData("ids",this.allAvailableIds),!0}catch(t){return console.error("Failed to sync Met Museum data:",t),!1}finally{this.isSyncing=!1}}async syncedAssetCount(){return this.allAvailableIds&&0!==this.allAvailableIds.length||await this.syncData(),this.allAvailableIds?this.allAvailableIds.length:0}async getAsset(t){if(this.allAvailableIds&&0!==this.allAvailableIds.length||await this.syncData(),t<0||t>=this.allAvailableIds.length)return null;if(this._syncedAssetData[t])return this._syncedAssetData[t];try{const e=await fetch(`${this.BASE_URL}/objects/${this.allAvailableIds[t]}`,this.DATA_REQUEST_OPTIONS);if(e.ok){const a=await e.json();if(i.isValidForDisplay(a)){const e=i.fromApiResponse(a);return this._syncedAssetData[t]=e,e}this._syncedAssetData[t]=null}else{if(403===e.status)return console.warn("Met Museum: Hit rate limit"),null;this._syncedAssetData[t]=null}}catch(e){console.error(`Failed to fetch asset ${t}:`,e),this._syncedAssetData[t]=null}return null}async getDisplayImageUrl(t){const e=await this.getAsset(t);return e?await e.getDisplayImageUrl():null}getDetailsUrl(t){return t.getDetailsUrl()}}const o=new class{constructor(){this.providers=new Map,this.currentProvider=null,this.state={provider:"google-arts",currentIndex:0,turnoverAlways:!1,lastUpdated:Date.now()},this.registerProvider(new r),this.registerProvider(new n)}registerProvider(t){this.providers.set(t.name,t)}getProvider(t){return this.providers.get(t)}getAllProviders(){return Array.from(this.providers.values())}async loadState(){try{const e=await t.readData("art_state");e&&(this.state={...this.state,...JSON.parse(e)})}catch(t){console.warn("Failed to load state, using defaults:",t)}}async saveState(){this.state.lastUpdated=Date.now(),await t.writeData("art_state",JSON.stringify(this.state))}async getCurrentProvider(){if(!this.currentProvider&&(await this.loadState(),this.currentProvider=this.getProvider(this.state.provider)||null,!this.currentProvider)){if(console.warn(`Provider ${this.state.provider} not found, using google-arts`),this.currentProvider=this.getProvider("google-arts")||null,!this.currentProvider)throw new Error("No providers available");this.state.provider="google-arts",await this.saveState()}return this.currentProvider}async setCurrentProvider(t){const e=this.getProvider(t);if(!e)throw new Error(`Provider ${t} not found`);this.currentProvider=e,this.state.provider=t,this.state.currentIndex=0,await this.saveState()}async syncData(){return(await this.getCurrentProvider()).syncData()}async getAsset(t){return(await this.getCurrentProvider()).getAsset(t)}async loadImage(t){return(await this.getCurrentProvider()).loadImage(t)}async syncedAssetCount(){return(await this.getCurrentProvider()).syncedAssetCount()}async getDisplayImageUrl(t){return this.currentProvider?await this.currentProvider.getDisplayImageUrl(t):null}async getDetailsUrl(t){const e=await this.getCurrentProvider(),a=await this.getAsset(t);return a?e.getDetailsUrl(a):null}async getCurrentIndex(){return await this.loadState(),this.state.currentIndex}async setCurrentIndex(t){this.state.currentIndex=t,await this.saveState()}async getTurnoverAlways(){return await this.loadState(),this.state.turnoverAlways}async setTurnoverAlways(t){this.state.turnoverAlways=t,await this.saveState()}async getUserSettings(){return await this.loadState(),{TURNOVER_ALWAYS:this.state.turnoverAlways,ART_PROVIDER:this.state.provider}}async setUserSetting(t,e){"turnoverAlways"===t?await this.setTurnoverAlways(e):"artProvider"===t&&await this.setCurrentProvider(e)}};globalThis.ArtManager={instance:o},globalThis.NewTabSetting={TURNOVER_ALWAYS:"turnoverAlways",ART_PROVIDER:"artProvider"}}();
